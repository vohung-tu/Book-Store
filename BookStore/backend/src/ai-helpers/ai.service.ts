import { Injectable, InternalServerErrorException } from '@nestjs/common';
import OpenAI from 'openai';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class AiService {
  private client: OpenAI;

  constructor(private configService: ConfigService) {
    const apiKey = this.configService.get<string>('OPENROUTER_API_KEY'); // should match env
    console.log('üîë API Key loaded?', apiKey ? '‚úÖ C√≥ key' : '‚ùå Kh√¥ng c√≥ key');

    this.client = new OpenAI({
      baseURL: 'https://openrouter.ai/api/v1',
      apiKey,
      // Optionally reflect your app appearance
      defaultHeaders: {
        'HTTP-Referer': 'https://book-store-v302.onrender.com/',
        'X-Title': 'PamTech',
      },
    });
  }

  async generateSummary(title: string): Promise<string> {
    const prompt = `B·∫°n l√† tr·ª£ l√Ω n·ªôi dung s√°ch; 
Vi·∫øt t√≥m t·∫Øt ng·∫Øn g·ªçn (3‚Äì5 c√¢u) cho ti√™u ƒë·ªÅ: "${title}" ƒë·ªÉ m√¥ t·∫£ h·∫•p d·∫´n v√† d·ªÖ hi·ªÉu.`;

    try {
      const res = await this.client.chat.completions.create({
        model: 'openai/gpt-5-mini', // s·ª≠ d·ª•ng GPT-5-mini
        messages: [{ role: 'user', content: prompt }],
      });

      console.log('‚úÖ AI response snippet:', res.choices[0].message?.content?.slice(0, 100));
      return res.choices[0].message?.content?.trim() ?? '';
    } catch (err: any) {
      console.error('‚ùå AI summary error:', err.response?.data || err.message);
      throw new InternalServerErrorException('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt AI');
    }
  }
}
