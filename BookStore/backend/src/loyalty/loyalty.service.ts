import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import mongoose, { Model, Types } from 'mongoose';
import { Order } from 'src/order/order/order.schema';
import { User } from 'src/users/user.schema';

@Injectable()
export class LoyaltyService {
  constructor(@InjectModel(User.name) private userModel: Model<User>,
  @InjectModel(Order.name) private orderModel: Model<Order>) {}

  /**
   * T·ª± ƒë·ªông c·∫≠p nh·∫≠t khi ho√†n t·∫•t ƒë∆°n h√†ng
   */
  async updateLoyaltyAfterOrder(userId: string | Types.ObjectId, orderTotal: number) {
    // ƒê·∫£m b·∫£o userId lu√¥n l√† string ƒë·ªÉ truy v·∫•n
    const id = typeof userId === 'string' ? userId : userId.toString();
    const user = await this.userModel.findById(id);

    if (!user) return null;

    // N·∫øu user ch∆∞a c√≥ totalSpent th√¨ g√°n m·∫∑c ƒë·ªãnh l√† 0
    if (!user.totalSpent) user.totalSpent = 0;

    // C·ªông th√™m t·ªïng ti·ªÅn c·ªßa ƒë∆°n h√†ng
    user.totalSpent += orderTotal;

    // T√≠nh c·∫•p ƒë·ªô m·ªõi d·ª±a theo t·ªïng chi ti√™u
    const newLevel = this.calculateLevel(user.totalSpent);

    // N·∫øu c√≥ thay ƒë·ªïi c·∫•p ƒë·ªô th√¨ c·∫≠p nh·∫≠t
    if (user.level !== newLevel) {
      user.level = newLevel;
    }

    await user.save();
    return user;
  }


  /**
   * H√†m x√°c ƒë·ªãnh c·∫•p ƒë·ªô d·ª±a tr√™n t·ªïng chi ti√™u
   */
  calculateLevel(totalSpent: number): string {
    if (totalSpent >= 4_000_000) return 'diamond';
    if (totalSpent >= 2_000_000) return 'gold';
    if (totalSpent >= 1_000_000) return 'silver';
    return 'member';
  }

  /**
   * D√†nh cho admin: L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng th√¢n thi·∫øt
   */
  async getAllCustomers() {
    // L·∫•y danh s√°ch t·∫•t c·∫£ user
    const users = await this.userModel
      .find({}, { full_name: 1, email: 1, level: 1 })
      .lean();

    // L·∫•y t·ªïng chi ti√™u th·ª±c t·∫ø t·ª´ orders (ch·ªâ t√≠nh ƒë∆°n ƒë√£ ho√†n t·∫•t)
    const orderStats = await this.orderModel.aggregate([
      { $match: { status: 'completed' } },
      {
        $group: {
          _id: '$userId',
          totalSpent: { $sum: '$total' },
          orderCount: { $sum: 1 },
        },
      },
    ]);

    // Map k·∫øt qu·∫£ order theo userId
    const statsMap = new Map(orderStats.map(o => [String(o._id), o]));

    // Tr·∫£ v·ªÅ danh s√°ch user k√®m t·ªïng chi ti√™u
    return users.map(u => {
      const stat = statsMap.get(String(u._id));
      const totalSpent = stat ? stat.totalSpent : 0;
      const orderCount = stat ? stat.orderCount : 0;

      // ‚úÖ n·∫øu level tr·ªëng (""), th√¨ t√≠nh l·∫°i d·ª±a theo totalSpent
      const computedLevel = this.getLevel(totalSpent);

      return {
        _id: u._id,
        fullName: u.full_name ?? '(Ch∆∞a c√≥ t√™n)',
        email: u.email,
        totalSpent,
        orderCount,
        level: computedLevel, // ‚úÖ d√πng gi√° tr·ªã ƒë√£ x·ª≠ l√Ω
      };
    });
  }

  private getLevel(total: number): string {
    if (total >= 4_000_000) return 'diamond';
    if (total >= 2_000_000) return 'gold';
    if (total >= 1_000_000) return 'silver';
    return 'member';
  }
  /**
   * D√†nh cho admin: C·∫≠p nh·∫≠t c·∫•p ƒë·ªô th·ªß c√¥ng
   */
  async updateCustomerLevel(userId: string, level: string) {
    return this.userModel.findByIdAndUpdate(
      userId,
      { level },
      { new: true }
    );
  }

  // L·∫•y loyalty info c·ªßa 1 user
  async getUserLoyalty(userId: string) {
    const user = await this.userModel.findById(userId).lean();
    if (!user) throw new NotFoundException('User not found');

    const orderStats = await this.orderModel.aggregate([
      {
        $match: {
          userId: userId.toString(), // √©p v·ªÅ string ƒë·ªÉ kh·ªõp DB
          status: 'completed'        // ho·∫∑c b·ªè n·∫øu mu·ªën test t·∫•t c·∫£
        }
      },
      {
        $group: {
          _id: null,
          totalSpent: { $sum: '$total' },
          orderCount: { $sum: 1 }
        }
      }
    ]);

    console.log('üìä Aggregate result:', orderStats);

    const totalSpent = orderStats[0]?.totalSpent || 0;
    const orderCount = orderStats[0]?.orderCount || 0;
    const level = this.getLevel(totalSpent);

    return {
      fullName: user.full_name,
      email: user.email,
      totalSpent,
      orderCount,
      level
    };
  }

}
